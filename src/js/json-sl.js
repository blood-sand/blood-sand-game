const jsonSL = (function () {const state = new WeakMap();

class Muncher {
    constructor (obj) {
        state.set(this, {
            in: obj,
            out: null,
            labelParser: null,
            valueParser: null,
            parent: null,
        });
    }

    munch () {
        const self = this;
        const s = state.get(self);

        // Reset the output.
        s.out = {};

        // Iterate over input, set output.
        for (let prop of Object.entries(s.in)) {
            prop = self.parseProperty(...prop);
            if (!prop) {
                continue;
            }
            let [name, value] = prop
            while (typeof value === "object" && "value" in value) {
                value = value.value;
            }
            if (value instanceof Array) {

            } else if (!isNaN(+value)) {
                value = +value;
            } else if(("" + value) !== "[object Object]") {
                value = "" + value;
            }
            s.out[name] = value;
        }
        if ("value" in s.out) {
            s.out = s.out.value;
        }
    }

    setLabelParser (parser) {
        const self = this;
        const s = state.get(self);
        s.labelParser = parser;
    }

    setValueParser (parser) {
        const self = this;
        const s = state.get(self);
        s.valueParser = parser;
    }

    setParent (m) {
        const self = this;
        const s = state.get(self);
        s.parent = m;
    }

    parseLabel (label) {
        const self = this;
        const s = state.get(self);
        if (s.labelParser === null || !s.labelParser.parse) {
            return label
        }
        //console.log("parseLabel in:", label)
        s.labelParser.yy.ctx = self.out;
        s.labelParser.yy.parent = s.parent;
        let result =  s.labelParser.parse(label);
        //console.log("parseLabel out:", result)
        if (typeof result !== "object") {
            return;
        }
        if (!(result.name in result.obj)) {
            return result.name;
        }
        return result;
    }

    parseValue (value) {
        const self = this;
        const s = state.get(self);
        //console.log("parseValue in:", value);
        if (typeof value === "object") {
            const m = new Muncher(value);
            m.setValueParser(s.valueParser);
            m.setLabelParser(s.labelParser);
            m.setParent(self);
            m.munch();
            return m.out;
        }
        if (typeof value === "string") {
            s.valueParser.yy.ctx = self.out;
            s.valueParser.yy.parent = s.parent;
            let result = s.valueParser.parse(value);
            //console.log("parseValue out:", result);
            return result;
        }
        return value;
    }

    parseProperty (name, value) {
        const self = this;
        const s = state.get(self);
        name = self.parseLabel(name);
        if (!name) {
            return;
        }
        if (typeof name === "object") {
            name.obj[name.name] = self.parseValue(value);
            return;
        }
        return [
            name, 
            self.parseValue(value)
        ];
    }

    toString () {
        let out = state.get(this).out;
        if (!out) {
            return "" + out;
        }
        if (typeof out.value === "string") {
            return out.value;
        }
        return out.toString();
    }

    valueOf () {
        let out = state.get(this).out;
        if (!out) {
            return +out;
        }
        if (typeof out.value === "number") {
            return out.value;
        }
        return out.valueOf();
    }

    get out () {
        return state.get(this).out;
    }
}/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,6],$V2=[1,16],$V3=[1,17],$V4=[1,14],$V5=[1,5],$V6=[1,7],$V7=[1,8],$V8=[1,9],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,25],$Vf=[1,26],$Vg=[5,11,12,20,21,22,23,24,25,26,27],$Vh=[5,11,12,19,20,21,22,23,24,25,26,27],$Vi=[5,11,12,20,21,22],$Vj=[5,11,12,20,21,22,23,24];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"STR":4,"EOF":5,"expressions":6,"rand":7,"RAND":8,"(":9,"e":10,",":11,")":12,"round":13,"ROUND":14,"range":15,"RANGE":16,"id":17,"REF":18,"[":19,"]":20,"+":21,"-":22,"*":23,"/":24,"^":25,"!":26,"%":27,"NUMBER":28,"E":29,"PI":30,"$accept":0,"$end":1},
terminals_: {2:"error",4:"STR",5:"EOF",8:"RAND",9:"(",11:",",12:")",14:"ROUND",16:"RANGE",18:"REF",19:"[",20:"]",21:"+",22:"-",23:"*",24:"/",25:"^",26:"!",27:"%",28:"NUMBER",29:"E",30:"PI"},
productions_: [0,[3,2],[3,1],[7,6],[13,4],[15,4],[15,6],[15,8],[6,2],[17,1],[17,6],[17,4],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,2],[10,2],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1].substr(1);
break;
case 2:
return $$[$0];
break;
case 3:

            const min = $$[$0-3];
            const max = $$[$0-1];
            const val = Math.round(Math.random() * 
                        (max - min)) + 
                        min;
            this.$ = {
                min: min,
                max: max,
                valueOf: () => val
            };
        
break;
case 4:

            this.$ = Math.round($$[$0-1]);
        
break;
case 5:

            this.$ = function () {
                let start = 0;
                let end = $$[$0-1];
                let step = 1;
                let result = [];
                if (start < end) {
                    for (let i = start; i <= end; i += step) {
                        result.push(i);
                    }
                } else if (start > end) {
                    for (let i = start; i >= end; i -= step) {
                        result.push(i);
                    }
                } else {
                    return [end];
                }
                return result;
            }();
        
break;
case 6:

            this.$ = function () {
                let start = $$[$0-3];
                let end = $$[$0-1];
                let step = 1;
                let result = [];
                if (start < end) {
                    for (let i = start; i <= end; i += step) {
                        result.push(i);
                    }
                } else if (start > end) {
                    for (let i = start; i >= end; i -= step) {
                        result.push(i);
                    }
                } else {
                    return [end];
                }
                return result;
            }();       
break;
case 7:

            this.$ = function () {
                let start = $$[$0-5];
                let end = $$[$0-3];
                let step = $$[$0-1];
                let result = [];
                if (start < end) {
                    for (let i = start; i <= end; i += step) {
                        result.push(i);
                    }
                } else if (start > end) {
                    for (let i = start; i >= end; i -= step) {
                        result.push(i);
                    }
                } else {
                    return [end];
                }
                return result;
            }();
        
break;
case 8:
return $$[$0-1];
break;
case 9:
this.$ = yy.getRef($$[$0]);
break;
case 12:
this.$ = $$[$0-2]+$$[$0];
break;
case 13:
this.$ = $$[$0-2]-$$[$0];
break;
case 14:
this.$ = $$[$0-2]*$$[$0];
break;
case 15:
this.$ = $$[$0-2]/$$[$0];
break;
case 16:
this.$ = Math.pow($$[$0-2], $$[$0]);
break;
case 17:

          this.$ = (function fact (n) { return n==0 ? 1 : fact(n-1) * n })($$[$0-1]);
        
break;
case 18:
this.$ = $$[$0-1]/100;
break;
case 19:
this.$ = -$$[$0];
break;
case 20:
this.$ = $$[$0-1];
break;
case 21:
this.$ = Number(yytext);
break;
case 22:
this.$ = Math.E;
break;
case 23:
this.$ = Math.PI;
break;
case 24: case 25: case 26: case 27:
this.$ = $$[$0];
break;
}
},
table: [{3:1,4:[1,2],6:3,7:11,8:$V0,9:$V1,10:4,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{1:[3]},{5:[1,18]},{1:[2,2]},{5:[1,19],21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},{7:11,8:$V0,9:$V1,10:27,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{7:11,8:$V0,9:$V1,10:28,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},o($Vg,[2,21]),o($Vg,[2,22]),o($Vg,[2,23]),o($Vg,[2,24],{19:[1,29]}),o($Vg,[2,25]),o($Vg,[2,26]),o($Vg,[2,27]),o($Vh,[2,9]),{9:[1,30]},{9:[1,31]},{9:[1,32]},{1:[2,1]},{1:[2,8]},{7:11,8:$V0,9:$V1,10:33,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{7:11,8:$V0,9:$V1,10:34,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{7:11,8:$V0,9:$V1,10:35,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{7:11,8:$V0,9:$V1,10:36,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{7:11,8:$V0,9:$V1,10:37,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},o($Vg,[2,17]),o($Vg,[2,18]),o($Vg,[2,19]),{12:[1,38],21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},{7:11,8:$V0,9:$V1,10:39,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{7:11,8:$V0,9:$V1,10:40,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{7:11,8:$V0,9:$V1,10:41,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{7:11,8:$V0,9:$V1,10:42,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},o($Vi,[2,12],{23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf}),o($Vi,[2,13],{23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf}),o($Vj,[2,14],{25:$Vd,26:$Ve,27:$Vf}),o($Vj,[2,15],{25:$Vd,26:$Ve,27:$Vf}),o([5,11,12,20,21,22,23,24,25],[2,16],{26:$Ve,27:$Vf}),o($Vg,[2,20]),{11:[1,43],20:[1,44],21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},{11:[1,45],21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},{12:[1,46],21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},{11:[1,48],12:[1,47],21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},{7:11,8:$V0,9:$V1,10:49,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},o($Vh,[2,11]),{7:11,8:$V0,9:$V1,10:50,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},o($Vg,[2,4]),o($Vg,[2,5]),{7:11,8:$V0,9:$V1,10:51,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{20:[1,52],21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},{12:[1,53],21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},{11:[1,55],12:[1,54],21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},o($Vh,[2,10]),o($Vg,[2,3]),o($Vg,[2,6]),{7:11,8:$V0,9:$V1,10:56,13:12,14:$V2,15:13,16:$V3,17:10,18:$V4,22:$V5,28:$V6,29:$V7,30:$V8},{12:[1,57],21:$V9,22:$Va,23:$Vb,24:$Vc,25:$Vd,26:$Ve,27:$Vf},o($Vg,[2,7])],
defaultActions: {3:[2,2],18:[2,1],19:[2,8]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 28
break;
case 2:return 'IF'
break;
case 3:return 'IS'
break;
case 4:return 'IN'
break;
case 5:return '<='
break;
case 6:return '>='
break;
case 7:return '<'
break;
case 8:return '>'
break;
case 9:return 16
break;
case 10:return 8
break;
case 11:return 14
break;
case 12:return 18
break;
case 13:return 4
break;
case 14:return 11
break;
case 15:return 23
break;
case 16:return 24
break;
case 17:return 22
break;
case 18:return 21
break;
case 19:return 25
break;
case 20:return 26
break;
case 21:return 27
break;
case 22:return 9
break;
case 23:return 12
break;
case 24:return 19
break;
case 25:return 20
break;
case 26:return 30
break;
case 27:return 29
break;
case 28:return 5
break;
case 29:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:if\b)/,/^(?:is\b)/,/^(?:in\b)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:range\b)/,/^(?:rand\b)/,/^(?:round\b)/,/^(?:[a-zA-Z\_][a-zA-Z0-9\_\.]*)/,/^(?:\..*)/,/^(?:,)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var labelSearch = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[5,10,11,20,21,22,23,24,25,27,28,29,30,31,32,33],$V2=[1,24],$V3=[1,16],$V4=[1,25],$V5=[1,26],$V6=[1,15],$V7=[1,17],$V8=[1,18],$V9=[1,19],$Va=[1,39],$Vb=[1,40],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[5,10,11,20,21,22,23,24,25,27,28],$Vi=[5,10,11,20,21,22,23,24,25,27,28,29,30];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"id":4,"EOF":5,"rand":6,"RAND":7,"(":8,"e":9,",":10,")":11,"round":12,"ROUND":13,"range":14,"RANGE":15,"if":16,"REF":17,"IF":18,"cond":19,"IS":20,"<=":21,">=":22,"<":23,">":24,"IN":25,"expressions":26,"+":27,"-":28,"*":29,"/":30,"^":31,"!":32,"%":33,"NUMBER":34,"E":35,"PI":36,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RAND",8:"(",10:",",11:")",13:"ROUND",15:"RANGE",17:"REF",18:"IF",20:"IS",21:"<=",22:">=",23:"<",24:">",25:"IN",27:"+",28:"-",29:"*",30:"/",31:"^",32:"!",33:"%",34:"NUMBER",35:"E",36:"PI"},
productions_: [0,[3,2],[6,6],[12,4],[14,4],[14,6],[14,8],[16,3],[16,4],[16,4],[16,4],[16,4],[16,4],[16,4],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[26,2],[4,1],[4,1],[9,3],[9,3],[9,3],[9,3],[9,3],[9,2],[9,2],[9,2],[9,3],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 20:
return $$[$0-1];
break;
case 2:

            const min = $$[$0-3];
            const max = $$[$0-1];
            const val = Math.round(Math.random() * 
                        (max - min)) + 
                        min;
            this.$ = {
                min: min,
                max: max,
                valueOf: () => val
            };
        
break;
case 3:

            this.$ = Math.round($$[$0-1]);
        
break;
case 4:

            this.$ = function () {
                let start = 0;
                let end = $$[$0-1];
                let step = 1;
                let result = [];
                if (start < end) {
                    for (let i = start; i <= end; i += step) {
                        result.push(i);
                    }
                } else if (start > end) {
                    for (let i = start; i >= end; i -= step) {
                        result.push(i);
                    }
                } else {
                    return [end];
                }
                return result;
            }();
        
break;
case 5:

            this.$ = function () {
                let start = $$[$0-3];
                let end = $$[$0-1];
                let step = 1;
                let result = [];
                if (start < end) {
                    for (let i = start; i <= end; i += step) {
                        result.push(i);
                    }
                } else if (start > end) {
                    for (let i = start; i >= end; i -= step) {
                        result.push(i);
                    }
                } else {
                    return [end];
                }
                return result;
            }();       
break;
case 6:

            this.$ = function () {
                let start = $$[$0-5];
                let end = $$[$0-3];
                let step = $$[$0-1];
                let result = [];
                if (start < end) {
                    for (let i = start; i <= end; i += step) {
                        result.push(i);
                    }
                } else if (start > end) {
                    for (let i = start; i >= end; i -= step) {
                        result.push(i);
                    }
                } else {
                    return [end];
                }
                return result;
            }();
        
break;
case 7:
this.$ = $$[$0] && yy.getRef($$[$0-2]);
break;
case 8:
this.$ = yy.evalRef($$[$0-3]) == $$[$0];
break;
case 9:
this.$ = yy.evalRef($$[$0-3]) <= $$[$0];
break;
case 10:
this.$ = yy.evalRef($$[$0-3]) >= $$[$0];
break;
case 11:
this.$ = yy.evalRef($$[$0-3]) < $$[$0];
break;
case 12:
this.$ = yy.evalRef($$[$0-3]) > $$[$0];
break;
case 13:

            this.$ = function () {
                let target = $$[$0];
                let val = yy.evalRef($$[$0-3]);
                while (typeof target === "object" && target.value !== undefined) {
                    target = target.value;
                }
                return target.indexOf && (target.indexOf(val) !== -1);
            }();
        
break;
case 14:
this.$ = $$[$0-2] == $$[$0];
break;
case 15:
this.$ = $$[$0-2] <= $$[$0];
break;
case 16:
this.$ = $$[$0-2] >= $$[$0];
break;
case 17:
this.$ = $$[$0-2] < $$[$0];
break;
case 18:
this.$ = $$[$0-2] > $$[$0];
break;
case 19:

            let target = $$[$0];
            while (typeof target === "object" && target.value !== undefined) {
                target = target.value;
            }
            this.$ = target.indexOf && 
                    (target.indexOf($$[$0-2]) !== -1) || 
                    (target.indexOf(+$$[$0-2]) !== -1) || 
                    (target.indexOf("" + $$[$0-2]) !== -1);
        
break;
case 21:
this.$ = yy.getRef($$[$0]);
break;
case 22: case 35: case 36: case 37: case 38:
this.$ = $$[$0];
break;
case 23:
this.$ = $$[$0-2]+$$[$0];
break;
case 24:
this.$ = $$[$0-2]-$$[$0];
break;
case 25:
this.$ = $$[$0-2]*$$[$0];
break;
case 26:
this.$ = $$[$0-2]/$$[$0];
break;
case 27:
this.$ = Math.pow($$[$0-2], $$[$0]);
break;
case 28:

          this.$ = (function fact (n) { return n==0 ? 1 : fact(n-1) * n })($$[$0-1]);
        
break;
case 29:
this.$ = $$[$0-1]/100;
break;
case 30:
this.$ = -$$[$0];
break;
case 31:
this.$ = $$[$0-1];
break;
case 32:
this.$ = Number(yytext);
break;
case 33:
this.$ = Math.E;
break;
case 34:
this.$ = Math.PI;
break;
}
},
table: [{3:1,4:2,16:4,17:$V0},{1:[3]},{5:[1,5]},o($V1,[2,21],{18:[1,6]}),o($V1,[2,22]),{1:[2,1]},{4:20,6:21,7:$V2,8:$V3,9:14,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,19:7,20:[1,8],21:[1,9],22:[1,10],23:[1,11],24:[1,12],25:[1,13],28:$V6,34:$V7,35:$V8,36:$V9},o($V1,[2,7]),{4:20,6:21,7:$V2,8:$V3,9:27,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:28,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:29,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:30,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:31,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:32,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{20:[1,33],21:[1,34],22:[1,35],23:[1,36],24:[1,37],25:[1,38],27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg},{4:20,6:21,7:$V2,8:$V3,9:46,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:47,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},o($V1,[2,32]),o($V1,[2,33]),o($V1,[2,34]),o($V1,[2,35]),o($V1,[2,36]),o($V1,[2,37]),o($V1,[2,38]),{8:[1,48]},{8:[1,49]},{8:[1,50]},o($V1,[2,8]),o($V1,[2,9]),o($V1,[2,10]),o($V1,[2,11]),o($V1,[2,12]),o($V1,[2,13]),{4:20,6:21,7:$V2,8:$V3,9:51,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:52,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:53,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:54,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:55,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:56,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:57,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:58,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:59,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:60,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:61,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},o($V1,[2,28]),o($V1,[2,29]),o($V1,[2,30]),{11:[1,62],27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg},{4:20,6:21,7:$V2,8:$V3,9:63,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:64,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{4:20,6:21,7:$V2,8:$V3,9:65,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},o($V1,[2,14]),o($V1,[2,15]),o($V1,[2,16]),o($V1,[2,17]),o($V1,[2,18]),o($V1,[2,19]),o($Vh,[2,23],{29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg}),o($Vh,[2,24],{29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg}),o($Vi,[2,25],{31:$Ve,32:$Vf,33:$Vg}),o($Vi,[2,26],{31:$Ve,32:$Vf,33:$Vg}),o([5,10,11,20,21,22,23,24,25,27,28,29,30,31],[2,27],{32:$Vf,33:$Vg}),o($V1,[2,31]),{10:[1,66],27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg},{11:[1,67],27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg},{10:[1,69],11:[1,68],27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg},{4:20,6:21,7:$V2,8:$V3,9:70,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},o($V1,[2,3]),o($V1,[2,4]),{4:20,6:21,7:$V2,8:$V3,9:71,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{11:[1,72],27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg},{10:[1,74],11:[1,73],27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg},o($V1,[2,2]),o($V1,[2,5]),{4:20,6:21,7:$V2,8:$V3,9:75,12:22,13:$V4,14:23,15:$V5,16:4,17:$V0,28:$V6,34:$V7,35:$V8,36:$V9},{11:[1,76],27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg},o($V1,[2,6])],
defaultActions: {5:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 34
break;
case 2:return 18
break;
case 3:return 20
break;
case 4:return 25
break;
case 5:return 21
break;
case 6:return 22
break;
case 7:return 23
break;
case 8:return 24
break;
case 9:return 15
break;
case 10:return 7
break;
case 11:return 13
break;
case 12:return 17
break;
case 13:return 'STR'
break;
case 14:return 10
break;
case 15:return 29
break;
case 16:return 30
break;
case 17:return 28
break;
case 18:return 27
break;
case 19:return 31
break;
case 20:return 32
break;
case 21:return 33
break;
case 22:return 8
break;
case 23:return 11
break;
case 24:return '['
break;
case 25:return ']'
break;
case 26:return 36
break;
case 27:return 35
break;
case 28:return 5
break;
case 29:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:if\b)/,/^(?:is\b)/,/^(?:in\b)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:range\b)/,/^(?:rand\b)/,/^(?:round\b)/,/^(?:[a-zA-Z\_][a-zA-Z0-9\_\.]*)/,/^(?:\..*)/,/^(?:,)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();



        return function jsonSL(data) {
            const m = new Muncher(data);
            function calcGetRef (ref, obj=this.ctx) {
                const self = this;
                if (ref.indexOf('.') === -1) {
                    return obj[ref];
                }
                let nameArr = ref.split('.');
                let firstName = nameArr.shift();
                if (firstName === "parent") {
                    return calcGetRef(nameArr.join('.'), self.parent.out);
                }
                return calcGetRef(nameArr.join('.'), obj[firstName]);
            }
            function labelEvalRef (ref, obj=this.ctx) {
                let label = this.getRef(ref, obj);
                if (typeof label !== "object") {
                    return label;
                }
                while(typeof label === "object" && label.value !== undefined) {
                    label = label.value;
                }

                if (!isNaN(+label)) {
                    return +label;
                }
                return label;
            }
            function labelGetRef (ref, obj=this.ctx) {
                const self = this;
                if (ref.indexOf('.') === -1) {
                    if (!isNaN(+obj[ref])) {
                        return {
                            name: ref, 
                            valueOf:() => +obj[ref], 
                            obj: obj
                        };
                    } else if (obj[ref] !== undefined) {
                        return {
                            name: ref,
                            value: obj[ref],
                            obj: obj
                        }
                    }
                    return {name: ref, obj: obj};
                }
                let nameArr = ref.split('.');
                let firstName = nameArr.shift();
                if (firstName === "parent") {
                    return labelGetRef(nameArr.join('.'), self.parent.out);
                }
                return labelGetRef(nameArr.join('.'), obj[firstName]);
            }
            calc.yy.getRef = calcGetRef;
            labelSearch.yy.getRef = labelGetRef;
            labelSearch.yy.evalRef = labelEvalRef;
            m.setValueParser(calc);
            m.setLabelParser(labelSearch);
            m.munch();
            return m.out;
        }
    }());
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    module.exports = jsonSL;
}